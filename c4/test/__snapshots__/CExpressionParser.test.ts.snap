// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment expression should parse assignment expression 1`] = `
AssignmentExpression {
  "left": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "op": "=",
  "parenthesized": false,
  "right": AssignmentExpression {
    "left": Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    "op": "+=",
    "parenthesized": false,
    "right": AssignmentExpression {
      "left": Identifier {
        "name": "c",
        "parenthesized": false,
        "type": "Identifier",
      },
      "op": "-=",
      "parenthesized": false,
      "right": AssignmentExpression {
        "left": Identifier {
          "name": "d",
          "parenthesized": false,
          "type": "Identifier",
        },
        "op": "*=",
        "parenthesized": false,
        "right": AssignmentExpression {
          "left": Identifier {
            "name": "e",
            "parenthesized": false,
            "type": "Identifier",
          },
          "op": "/=",
          "parenthesized": false,
          "right": AssignmentExpression {
            "left": Identifier {
              "name": "f",
              "parenthesized": false,
              "type": "Identifier",
            },
            "op": "&=",
            "parenthesized": false,
            "right": AssignmentExpression {
              "left": Identifier {
                "name": "g",
                "parenthesized": false,
                "type": "Identifier",
              },
              "op": "|=",
              "parenthesized": false,
              "right": AssignmentExpression {
                "left": Identifier {
                  "name": "h",
                  "parenthesized": false,
                  "type": "Identifier",
                },
                "op": "^=",
                "parenthesized": false,
                "right": Identifier {
                  "name": "i",
                  "parenthesized": false,
                  "type": "Identifier",
                },
                "type": "AssignmentExpression",
              },
              "type": "AssignmentExpression",
            },
            "type": "AssignmentExpression",
          },
          "type": "AssignmentExpression",
        },
        "type": "AssignmentExpression",
      },
      "type": "AssignmentExpression",
    },
    "type": "AssignmentExpression",
  },
  "type": "AssignmentExpression",
}
`;

exports[`comma expression should parse comma expression priority 15 1`] = `
SequenceExpression {
  "expressions": Array [
    Identifier {
      "name": "a",
      "parenthesized": false,
      "type": "Identifier",
    },
    Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
  ],
  "parenthesized": false,
  "type": "SequenceExpression",
}
`;

exports[`conditional expression should parse conditional expression 1`] = `
ConditionalExpression {
  "alternate": ConditionalExpression {
    "alternate": Identifier {
      "name": "f",
      "parenthesized": false,
      "type": "Identifier",
    },
    "consequent": Identifier {
      "name": "e",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "test": Identifier {
      "name": "d",
      "parenthesized": false,
      "type": "Identifier",
    },
    "type": "ConditionalExpression",
  },
  "consequent": Identifier {
    "name": "b",
    "parenthesized": false,
    "type": "Identifier",
  },
  "parenthesized": false,
  "test": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "type": "ConditionalExpression",
}
`;

exports[`conditional expression should parse conditional expression with correct precedence 1`] = `
AssignmentExpression {
  "left": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "op": "=",
  "parenthesized": false,
  "right": AssignmentExpression {
    "left": ConditionalExpression {
      "alternate": Identifier {
        "name": "c",
        "parenthesized": false,
        "type": "Identifier",
      },
      "consequent": Identifier {
        "name": "b",
        "parenthesized": false,
        "type": "Identifier",
      },
      "parenthesized": false,
      "test": NumericLiteral {
        "parenthesized": false,
        "type": "NumericLiteral",
        "value": 1,
      },
      "type": "ConditionalExpression",
    },
    "op": "=",
    "parenthesized": false,
    "right": Identifier {
      "name": "d",
      "parenthesized": false,
      "type": "Identifier",
    },
    "type": "AssignmentExpression",
  },
  "type": "AssignmentExpression",
}
`;
