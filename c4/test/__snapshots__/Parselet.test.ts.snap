// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expression should parse binary operators with correct precedence 1`] = `
BinaryExpression {
  "left": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "op": "+",
  "parenthesized": false,
  "right": BinaryExpression {
    "left": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
    "op": "*",
    "parenthesized": false,
    "right": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 2,
    },
    "type": "BinaryExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse call expression  1`] = `
CallExpression {
  "callee": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "params": Array [
    Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    Identifier {
      "name": "c",
      "parenthesized": false,
      "type": "Identifier",
    },
    Identifier {
      "name": "d",
      "parenthesized": false,
      "type": "Identifier",
    },
  ],
  "parenthesized": false,
  "type": "CallExpression",
}
`;

exports[`expression should parse conditional operators 1`] = `
ConditionalExpression {
  "alternate": Identifier {
    "name": "c",
    "parenthesized": false,
    "type": "Identifier",
  },
  "consequent": Identifier {
    "name": "b",
    "parenthesized": false,
    "type": "Identifier",
  },
  "parenthesized": false,
  "test": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "type": "ConditionalExpression",
}
`;

exports[`expression should parse conditional operators with correct precedence relative to + 1`] = `
BinaryExpression {
  "left": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "op": "+",
  "parenthesized": false,
  "right": ConditionalExpression {
    "alternate": Identifier {
      "name": "d",
      "parenthesized": false,
      "type": "Identifier",
    },
    "consequent": Identifier {
      "name": "c",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "test": Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    "type": "ConditionalExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse conditional operators with correct precedence relative to . 1`] = `
ConditionalExpression {
  "alternate": Identifier {
    "name": "d",
    "parenthesized": false,
    "type": "Identifier",
  },
  "consequent": Identifier {
    "name": "c",
    "parenthesized": false,
    "type": "Identifier",
  },
  "parenthesized": false,
  "test": MemberExpression {
    "computed": false,
    "object": Identifier {
      "name": "a",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "property": Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    "type": "MemberExpression",
  },
  "type": "ConditionalExpression",
}
`;

exports[`expression should parse conditional operators with right associativity 1`] = `
ConditionalExpression {
  "alternate": ConditionalExpression {
    "alternate": Identifier {
      "name": "e",
      "parenthesized": false,
      "type": "Identifier",
    },
    "consequent": Identifier {
      "name": "d",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "test": Identifier {
      "name": "c",
      "parenthesized": false,
      "type": "Identifier",
    },
    "type": "ConditionalExpression",
  },
  "consequent": Identifier {
    "name": "b",
    "parenthesized": false,
    "type": "Identifier",
  },
  "parenthesized": false,
  "test": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "type": "ConditionalExpression",
}
`;

exports[`expression should parse index correctly 1`] = `
BinaryExpression {
  "left": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "op": "+",
  "parenthesized": false,
  "right": MemberExpression {
    "computed": true,
    "object": Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "property": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
    "type": "MemberExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse index with lower precedence correctly 1`] = `
MemberExpression {
  "computed": true,
  "object": MemberExpression {
    "computed": false,
    "object": Identifier {
      "name": "a",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "property": Identifier {
      "name": "b",
      "parenthesized": false,
      "type": "Identifier",
    },
    "type": "MemberExpression",
  },
  "parenthesized": false,
  "property": NumericLiteral {
    "parenthesized": false,
    "type": "NumericLiteral",
    "value": 1,
  },
  "type": "MemberExpression",
}
`;

exports[`expression should parse left associative binary operators correctly 1`] = `
BinaryExpression {
  "left": BinaryExpression {
    "left": Identifier {
      "name": "a",
      "parenthesized": false,
      "type": "Identifier",
    },
    "op": "+",
    "parenthesized": false,
    "right": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
    "type": "BinaryExpression",
  },
  "op": "+",
  "parenthesized": false,
  "right": NumericLiteral {
    "parenthesized": false,
    "type": "NumericLiteral",
    "value": 2,
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse parenthesis correctly 1`] = `
BinaryExpression {
  "left": NumericLiteral {
    "parenthesized": false,
    "type": "NumericLiteral",
    "value": 1,
  },
  "op": "+",
  "parenthesized": false,
  "right": BinaryExpression {
    "left": BinaryExpression {
      "left": NumericLiteral {
        "parenthesized": false,
        "type": "NumericLiteral",
        "value": 2,
      },
      "op": "+",
      "parenthesized": true,
      "right": NumericLiteral {
        "parenthesized": false,
        "type": "NumericLiteral",
        "value": 3,
      },
      "type": "BinaryExpression",
    },
    "op": "*",
    "parenthesized": false,
    "right": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 4,
    },
    "type": "BinaryExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse postfix operators correctly 1`] = `
BinaryExpression {
  "left": UnaryExpression {
    "op": "-",
    "operand": UnaryExpression {
      "op": "++",
      "operand": Identifier {
        "name": "a",
        "parenthesized": false,
        "type": "Identifier",
      },
      "parenthesized": false,
      "prefix": false,
      "type": "UnaryExpression",
    },
    "parenthesized": false,
    "prefix": true,
    "type": "UnaryExpression",
  },
  "op": "+",
  "parenthesized": false,
  "right": BinaryExpression {
    "left": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
    "op": "*",
    "parenthesized": false,
    "right": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 2,
    },
    "type": "BinaryExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse prefix operators correctly 1`] = `
BinaryExpression {
  "left": UnaryExpression {
    "op": "-",
    "operand": Identifier {
      "name": "a",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "prefix": true,
    "type": "UnaryExpression",
  },
  "op": "+",
  "parenthesized": false,
  "right": BinaryExpression {
    "left": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
    "op": "*",
    "parenthesized": false,
    "right": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 2,
    },
    "type": "BinaryExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse prefix operators correctly at right 1`] = `
BinaryExpression {
  "left": NumericLiteral {
    "parenthesized": false,
    "type": "NumericLiteral",
    "value": 1,
  },
  "op": "+",
  "parenthesized": false,
  "right": UnaryExpression {
    "op": "-",
    "operand": Identifier {
      "name": "a",
      "parenthesized": false,
      "type": "Identifier",
    },
    "parenthesized": false,
    "prefix": true,
    "type": "UnaryExpression",
  },
  "type": "BinaryExpression",
}
`;

exports[`expression should parse right associative binary operators correctly 1`] = `
BinaryExpression {
  "left": Identifier {
    "name": "a",
    "parenthesized": false,
    "type": "Identifier",
  },
  "op": "**",
  "parenthesized": false,
  "right": BinaryExpression {
    "left": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 1,
    },
    "op": "**",
    "parenthesized": false,
    "right": NumericLiteral {
      "parenthesized": false,
      "type": "NumericLiteral",
      "value": 2,
    },
    "type": "BinaryExpression",
  },
  "type": "BinaryExpression",
}
`;
